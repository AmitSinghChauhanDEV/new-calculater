{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","inputRef","useRef","handleClick","e","concat","target","name","backspace","slice","length","clear","calculate","eval","toString","error","useEffect","current","focus","className","type","value","ref","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"irBAEA,SAASA,MAAM,IAAD,UACiBC,oDAAS,IAD1B,8NACLC,OADK,cACGC,UADH,cAGNC,SAAWC,kDAAO,MAIxB,SAASC,YAAYC,GACnBJ,UAAUD,OAAOM,OAAOD,EAAEE,OAAOC,OAGnC,SAASC,YACPR,UAAUD,OAAOU,MAAM,EAAGV,OAAOW,OAAS,IAE5C,SAASC,QACPX,UAAU,IAGZ,SAASY,YACP,IACEZ,UAAUa,KAAKd,QAAQe,YAEzB,MAAMC,OACJf,UAAU,UAGd,OArBAgB,sDAAU,kBAAKf,SAASgB,QAAQC,WAsB9B,kEAAKC,UAAU,YACb,uEACE,oEAAOC,KAAK,OAAOC,MAAOtB,OAAQuB,IAAKrB,YAGzC,kEAAKkB,UAAU,UACb,qEAAQI,GAAG,QAAQC,QAASb,OAA5B,SACA,qEAAQY,GAAG,YAAYC,QAAShB,WAAhC,KACA,qEAAQD,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,UACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQI,KAAK,IAAIiB,QAASrB,aAA1B,OACA,qEAAQoB,GAAG,SAASC,QAASZ,WAA7B,aAUQf,2B,iKClDI4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACnC,EAAA,EAAD,OAEFoC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACL2B,QAAQ3B,MAAMA,EAAM4B,c","file":"static/js/main.900165c8.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport './App.css';\nfunction App(){\n  const [result, setResult]  = useState(\"\");\n\n  const inputRef = useRef(null);\n  \n  useEffect(()=> inputRef.current.focus());//page kulte hi focus input box pe jayega\n\n  function handleClick(e){\n    setResult(result.concat(e.target.name));//jo pahle no. likhege uss k ssath next no. concate karene k liye\n  }\n\n  function backspace(){//iss say textbox me likha data cancle hoga\n    setResult(result.slice(0, result.length - 1));//slice ak value delete karta hi last index value say \n  }\n  function clear(){\n    setResult(\"\");\n  }\n\n  function calculate(){\n    try{\n      setResult(eval(result).toString());//evel ka matlab evaluate mathmatical sign ko jo bhi expression result me aayega usay evel say calculate karta hi\n    }\n    catch(error){\n      setResult(\"Error\");\n    }\n  }\n  return (\n    <div className=\"calc-app\">\n      <form>\n        <input type=\"text\" value={result} ref={inputRef} />\n      </form>\n\n      <div className=\"keypad\">\n        <button id=\"clear\" onClick={clear}>clear</button>\n        <button id=\"backspace\" onClick={backspace}>C</button>\n        <button name=\"+\" onClick={handleClick}> + </button >\n        <button name=\"7\" onClick={handleClick}> 7 </button >\n        <button name=\"8\" onClick={handleClick}> 8 </button >\n        <button name=\"9\" onClick={handleClick}> 9 </button >\n        <button name=\"-\" onClick={handleClick}> - </button >\n        <button name=\"4\" onClick={handleClick}> 4 </button >\n        <button name=\"5\" onClick={handleClick}> 5 </button >\n        <button name=\"6\" onClick={handleClick}> 6 </button >\n        <button name=\"*\" onClick={handleClick}> &times; </button >{/*ye &times say 'X' ka sign k liye */}\n        <button name=\"1\" onClick={handleClick}> 1 </button >\n        <button name=\"2\" onClick={handleClick}> 2 </button >\n        <button name=\"3\" onClick={handleClick}> 3 </button >\n        <button name=\"/\" onClick={handleClick}> / </button >\n        <button name=\"0\" onClick={handleClick}> 0 </button >\n        <button name=\".\" onClick={handleClick}> . </button>\n        <button id=\"result\" onClick={calculate}>Result </button>\n      \n      </div>\n\n    </div>\n  )\n\n\n}\n\nexport default  App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}